//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.Config
{

public sealed partial class GraphEdgeCfg :  Bright.Config.BeanBase 
{
    public GraphEdgeCfg(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["startIdx"].IsNumber) { throw new SerializationException(); }  StartIdx = _json["startIdx"]; }
        { if(!_json["endIdx"].IsNumber) { throw new SerializationException(); }  EndIdx = _json["endIdx"]; }
        { if(!_json["condition"].IsNumber) { throw new SerializationException(); }  Condition = _json["condition"]; }
        { if(!_json["value"].IsNumber) { throw new SerializationException(); }  Value = _json["value"]; }
        PostInit();
    }

    public GraphEdgeCfg(int id, int startIdx, int endIdx, int condition, int value ) 
    {
        this.Id = id;
        this.StartIdx = startIdx;
        this.EndIdx = endIdx;
        this.Condition = condition;
        this.Value = value;
        PostInit();
    }

    public static GraphEdgeCfg DeserializeGraphEdgeCfg(JSONNode _json)
    {
        return new Config.GraphEdgeCfg(_json);
    }

    /// <summary>
    /// 节点Id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 起点
    /// </summary>
    public int StartIdx { get; private set; }
    /// <summary>
    /// 终点
    /// </summary>
    public int EndIdx { get; private set; }
    /// <summary>
    /// 是否生效
    /// </summary>
    public int Condition { get; private set; }
    /// <summary>
    /// 边的权值
    /// </summary>
    public int Value { get; private set; }

    public const int __ID__ = 849504101;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "StartIdx:" + StartIdx + ","
        + "EndIdx:" + EndIdx + ","
        + "Condition:" + Condition + ","
        + "Value:" + Value + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
